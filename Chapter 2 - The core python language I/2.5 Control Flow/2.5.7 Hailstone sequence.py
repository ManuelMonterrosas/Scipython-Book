"""
The hailstone sequence starting at an integer n > 0 is generated by the repeated
application of the three rules:
- if n = 1, the sequence ends;
- if n is even, the next number in the sequence is n/2;
- if n is odd, the next number in the sequence is 3n+1.
(a) Write a program to calculate the hailstone sequence starting at 27.
(b) Let the stopping time be the number of numbers in a given hailstone sequence.
Modify your hailstone program to return the stopping time instead of the numbers
themselves. Adapt your program to demonstrate that the hailstone sequences
started with 1 <= n <= 100 agree with the Collatz conjecture (that all hailstone
sequences stop eventually).
"""
option = 2
if option == 1:  # simple sequence finding 
    current_number = 27
    sequence = []
    while True:
        sequence.append(int(current_number))
        if current_number == 1:
            break
        if current_number%2:
            current_number = 3*current_number + 1
        else:
            current_number /= 2
    print(sequence)
if option == 2:  # calculate stopping times for the first n numbers. For the first 100, the maximum time is 119 steps
    n_max = 100
    stopping_times = []
    for current_number in range(1, n_max):
        i = 0  # counter
        while True:
            i += 1
            if current_number == 1:
                break
            if current_number%2:
                current_number = 3*current_number + 1
            else:
                current_number /= 2
        stopping_times.append(i)
    print(stopping_times)
    print(max(stopping_times))